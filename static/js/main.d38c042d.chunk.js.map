{"version":3,"sources":["components/Home.js","components/NavBar.js","components/context/strainsSelectContext/strainSelectContext.js","components/strains/StrainSelectionForm.js","components/context/strainsSelectContext/StrainSelectReducer.js","components/context/types.js","components/context/strainsSelectContext/StrainSelectionState.js","components/strains/Strains.js","components/Login.js","components/PrivateRoute.js","components/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["Home","NavBar","title","icon","className","to","defaultProps","StrainSelectContext","createContext","StrainSelectionForm","useContext","useState","flavor1","flavor2","flavor3","flavor4","flavor5","effect1","effect2","effect3","state","action","type","strainSelection","payload","StrainSelectionState","props","useReducer","StrainSelectReducer","current","dispatch","Provider","value","addStrainSelection","children","Strains","Login","id","password","email","credentials","setCredentials","onChange","e","target","name","onSubmit","preventDefault","axios","post","then","res","window","localStorage","setItem","history","push","catch","err","console","log","placeholder","PrivateRoute","Component","component","rest","render","getItem","SignUp","username","role","data","App","exact","path","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d38c042d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <div >\r\n           <div>\r\n            \r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const NavBar = ({title, icon}) => {\r\n    return (\r\n        <div className=\"navbar bg-primary\">\r\n            <h1>{title}</h1> \r\n            <img />\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n\r\n                <li>\r\n                    <Link to=\"/login\">Login</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/sign-up\">Sign-Up</Link>\r\n                </li>\r\n\r\n                <li>\r\n                    <Link to=\"/strains\">Strains</Link>\r\n                </li>\r\n\r\n            </ul>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nNavBar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    icon: PropTypes.string\r\n}\r\n\r\nNavBar.defaultProps = {\r\n    title: 'WeedGotcha',\r\n    icon: 'fas fa-id-card-alt'\r\n}\r\n\r\nexport default NavBar; \r\n","import { createContext } from 'react';\r\n\r\nconst StrainSelectContext = createContext();\r\n\r\nexport default StrainSelectContext;","import React, { useState, useContext, useEffect } from 'react';\r\nimport StrainSelectContext from '../context/strainsSelectContext/strainSelectContext'\r\n// import Select from 'react-select';\r\n// import makeAnimated from 'react-select/animated'\r\n\r\nconst flavor = [\r\n    { id: 1, name: \"Sweet\"},\r\n    { id: 2, name: 'Tropical'},\r\n    { id: 3, name: 'Peach'},\r\n    { id: 4, name: 'Minty'},\r\n    { id: 5, name: 'Fruit'},\r\n    { id: 6, name: 'Coffee'},\r\n    { id: 7, name: \"Chemical\"},\r\n    { id: 8, name: 'Blueberry'},\r\n    { id: 9, name: \"Pear\"},\r\n    { id: 10, name: \"Apple\"},\r\n    { id: 11, name: \"Woody\"},\r\n    { id: 12, name: \"Cheese\"},\r\n    { id: 13, name: \"Pungent\"},\r\n    { id: 14, name: \"Flowery\"},\r\n    { id: 15, name: \"Pepper\"},\r\n    { id: 16, name: \"Sage\"},\r\n    { id: 17, name: \"Chestnut\"},\r\n    { id: 18, name: \"Strawberry\"},\r\n    { id: 19, name: \"Honey\"},\r\n    { id: 20, name: \"Mint\"},\r\n    { id: 21, name: \"Orange\"},\r\n    { id: 22, name: \"Tobacco\"},\r\n    { id: 23, name: \"Tea\"},\r\n    { id: 24, name: \"Lime\"},\r\n    { id: 25, name: \"Grapefruit\"},\r\n    { id: 26, name: \"Lavender\"},\r\n    { id: 27, name: \"Tar\"},\r\n    { id: 28, name: \"Skunk\"},\r\n    { id: 29, name: \"Pine\"},\r\n    { id: 30, name: \"Mango\"},\r\n    { id: 31, name: \"Tree\"},\r\n    { id: 32, name: \"Apricot\"},\r\n    { id: 33, name: \"Vanilla\"},\r\n    { id: 34, name: \"Berry\"},\r\n    { id: 35, name: \"Menthol\"},\r\n    { id: 36, name: \"Violet\"},\r\n    { id: 37, name: \"Blue\"},\r\n    { id: 38, name: \"Nutty\"},\r\n    { id: 39, name: \"Grape\"},\r\n    { id: 40, name: \"Pineapple\"},\r\n    { id: 41, name: \"Diesel\"},\r\n    { id: 42, name: \"Ammonia\"},\r\n    { id: 43, name: \"Plum\"},\r\n    { id: 44, name: \"Lemon\"},\r\n    { id: 45, name: \"Butter\"},\r\n    { id: 46, name: \"Citrus\"},\r\n    { id: 47, name: \"Rose\"},\r\n    { id: 48, name: \"Earthy\"},\r\n    { id: 49, name: \"Spicy/Herbal\"},\r\n    { id: 50, name: \"None\"},\r\n\r\n]\r\n\r\nconst effect = [\r\n    { id: 1, name: \"Giggly\"},\r\n    { id: 2, name: 'Aroused'},\r\n    { id: 3, name: 'Energetic'},\r\n    { id: 4, name: 'Sleepy'},\r\n    { id: 5, name: 'Euphoric'},\r\n    { id: 6, name: 'Uplifted'},\r\n    { id: 7, name: \"Focused\"},\r\n    { id: 8, name: 'Creative'},\r\n    { id: 9, name: \"Talkative\"},\r\n    { id: 10, name: \"Mouth\"},\r\n    { id: 11, name: \"Dry\"},\r\n    { id: 12, name: \"Tingly\"},\r\n    { id: 13, name: \"Relaxed\"},\r\n    { id: 14, name: \"Hungry\"},\r\n    { id: 15, name: \"Happy\"},\r\n    { id: 16, name: \"None\"},\r\n]\r\n\r\n\r\n\r\n\r\n\r\nexport const StrainSelectionForm = () => {\r\n    const strainSelectContext = useContext(StrainSelectContext)\r\n    const [flavorsEffects, setFlavorsEffects] = useState([\r\n        {\r\n            flavor1: '',\r\n            flavor2: '',\r\n            flavor3: '',\r\n            flavor4: '',\r\n            flavor5: '',\r\n            effect1: '',\r\n            effect2: '',\r\n            effect3: '',\r\n           \r\n        }\r\n    ]);\r\n\r\n    // const { addStrainSelection, current } = strainSelectContext\r\n   \r\n\r\n    // const { flavor1, flavor2, flavor3, flavor4, flavor5, effect1, effect2, effect3} = flavorsEffects\r\n\r\n    \r\n\r\n    // const onChangeFlavorsEffects = e => {\r\n    //     setFlavorsEffects({\r\n    //         ...flavorsEffects,\r\n    //         [e.target.name]: e.target.value\r\n    //     }\r\n    //     )\r\n        \r\n\r\n    // }\r\n\r\n    // const onSubmitFlavorsEffects = e => {\r\n    //     e.preventDefault();\r\n    //     // addStrainSelection(flavorsEffects)\r\n    //     setFlavorsEffects({\r\n    //         flavor1: '',\r\n    //         flavor2: '',\r\n    //         flavor3: '',\r\n    //         flavor4: '',\r\n    //         flavor5: '',\r\n    //         effect1: '',\r\n    //         effect2: '',\r\n    //         effect3: ''\r\n\r\n    //     })\r\n    // }\r\n\r\n    // let flavorList = flavor.length > 0 \r\n    // && flavor.map((item,i)=> {\r\n    //     return(\r\n    //     <option key={i} value={item.name}>{item.name}</option>\r\n    //     )\r\n    // })\r\n\r\n    // let effectList = effect.length > 0 \r\n    // && effect.map((item,i)=> {\r\n    //     return(\r\n    //     <option key={i} value={item.name}>{item.name}</option>\r\n    //     )\r\n    // })\r\n\r\n\r\n    \r\n return (\r\n         <div></div>\r\n        \r\n        \r\n    //       <form onSubmit={onSubmitFlavorsEffects}>\r\n    //         <label>\r\n    //            <h2 className=\"text-primary\">Pick Up To 5 Flavors</h2>\r\n    //            <select onChange={onChangeFlavorsEffects} name='flavor1'value={flavor1}>\r\n    //                 {flavorList}\r\n    //            </select>\r\n    //             <select onChange={onChangeFlavorsEffects} value={flavor2}>\r\n    //                {flavorList}\r\n    //            </select>\r\n    //            <select onChange={onChangeFlavorsEffects} value={flavor3}>\r\n    //                {flavorList}\r\n    //            </select>\r\n    //            <select onChange={onChangeFlavorsEffects} value={flavor4}>\r\n    //                {flavorList}\r\n    //            </select>\r\n    //            <select onChange={onChangeFlavorsEffects} value={flavor5}>\r\n    //                {flavorList}\r\n    //            </select>\r\n    //         </label>\r\n    //            <label>\r\n    //           <h2>Pick Up To 3 Effects</h2>\r\n    //           <select  onChange={onChangeFlavorsEffects} value={effect1}>\r\n    //                {effectList}\r\n    //           </select>\r\n    //            <select onChange={onChangeFlavorsEffects} value={effect2}>\r\n    //               {effectList}\r\n    //           </select>\r\n    //           <select onChange={onChangeFlavorsEffects} value={effect3}>\r\n    //               {effectList}\r\n    //           </select>\r\n               \r\n            \r\n    //            <input type=\"submit\" value=\"Submit\" className=\"btn btn-block btn-dark\"/>\r\n    //        </label> \r\n\r\n    //        </form>\r\n\r\n\r\n      \r\n           \r\n       \r\n             \r\n              \r\n           \r\n           \r\n\r\n          \r\n\r\n          \r\n           \r\n       \r\n\r\n    )\r\n}\r\n\r\nexport default StrainSelectionForm;\r\n","import {\r\n    ADD_STRAINSELECTION,\r\n    DELETE_STRAINSELECTION,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT\r\n} from '../types';\r\n\r\nexport default (state, action) => {\r\n    switch(action.type){\r\n        case ADD_STRAINSELECTION:\r\n            return{\r\n                ...state,\r\n                strainSelection: [...state.strainSelection, action.payload]\r\n            }\r\n    }\r\n}","export const ADD_STRAINSELECTION = 'ADD_STRAINSELECTION';\r\nexport const DELETE_STRAINSELECTION = 'DELETE_STRAINSELECTION';\r\nexport const SET_CURRENT = 'SET_CURRENT';\r\nexport const CLEAR_CURRENT = 'CLEAR_CURRENT';\r\n\r\n","import React, { useReducer } from 'react'\r\nimport { v4 as uuid } from 'uuid';\r\nimport StrainSelectContext from './strainSelectContext';\r\nimport StrainSelectReducer from './StrainSelectReducer'\r\n\r\nimport {\r\n    ADD_STRAINSELECTION,\r\n    DELETE_STRAINSELECTION,\r\n    SET_CURRENT,\r\n    CLEAR_CURRENT\r\n} from '../types';\r\n\r\nconst StrainSelectionState = props => {\r\n    const initialState = {\r\n        strainSelection: [],\r\n        current: null\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(StrainSelectReducer, initialState);\r\n\r\n    //Add Strain Selection\r\n   \r\n    const addStrainSelection = strainSelection =>{\r\n        dispatch({ type: ADD_STRAINSELECTION, payload: strainSelection})\r\n    }\r\n\r\n    \r\n    //Delete Strain Selection\r\n\r\n    //Set Current Selection,\r\n\r\n    // Clear Current Selection\r\n\r\n    return (\r\n        <StrainSelectContext.Provider value={{\r\n            strainSelection: state.strainSelection,\r\n            addStrainSelection\r\n        }}>\r\n            { props.children }\r\n        </StrainSelectContext.Provider>\r\n    )\r\n\r\n}\r\n\r\nexport default StrainSelectionState;","import React from 'react';\r\n\r\nimport StrainSelctionForm from './StrainSelectionForm';\r\nimport StrainSelectionState from '../context/strainsSelectContext/StrainSelectionState'\r\n\r\nexport const Strains = () => {\r\n    return (\r\n        <StrainSelectionState>\r\n        <div>\r\n            <div>\r\n                <StrainSelctionForm/>\r\n            </div>\r\n\r\n            \r\n            \r\n        </div>\r\n        </StrainSelectionState>\r\n    )\r\n}\r\n\r\nexport default Strains\r\n","import React, { useState } from 'react';\r\nimport  axiosWithAuth  from './axiosWithAuth'\r\nimport axios from 'axios';\r\n\r\nexport const Login = props => {\r\n\r\n    const [credentials, setCredentials ] = useState({\r\n        id:'',\r\n        password: '',\r\n        email: ''\r\n       \r\n    });\r\n\r\n    const { password, email } = credentials;\r\n\r\n    const url = 'https://mc-7-be.herokuapp.com'\r\n\r\n    const onChange = e => {\r\n        \r\n        setCredentials({\r\n            ...credentials,\r\n        [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        axios\r\n        .post(`${url}/api/auth/login`, credentials)\r\n       .then(res => {\r\n           window.localStorage.setItem('token', res.payload)\r\n           props.history.push('/protectedstrains')\r\n       })\r\n       .catch(err => console.log(err))\r\n    }\r\n    \r\n    return (\r\n       <form onSubmit={onSubmit}>\r\n           <h2>Login</h2>\r\n           <input\r\n           name=\"email\"\r\n           type=\"email\"\r\n           placeholder=\"email\"\r\n           value={email}\r\n           onChange={onChange}\r\n           />\r\n           \r\n            <input\r\n            name=\"password\"\r\n           type=\"password\"\r\n           placeholder=\"password\"\r\n           value={password}\r\n           onChange={onChange}\r\n           />\r\n          \r\n\r\n        <div>\r\n               <input\r\n               type=\"submit\"\r\n               value=\"Login\"\r\n               className=\"btn btn-block bg-dark\"\r\n               />\r\n           </div>\r\n           {/* <h5>Role</h5>\r\n           <input\r\n           type=\"radio\"\r\n           name=\"role\"\r\n           value=\"patient\"\r\n           checked={role === 'patient'}\r\n           onChange={onChange}/>\r\n           Patient{' '}\r\n           <input\r\n           type=\"radio\"\r\n           name=\"role\"\r\n           value=\"provider\"\r\n           checked={role === 'provider'}\r\n           onChange={onChange}/>\r\n           Provider{' '}\r\n           <div>\r\n               <input\r\n               type=\"submit\"\r\n               value=\"Sign-up\"\r\n               className=\"btn btn-block bg-dark\"\r\n               />\r\n           </div> */}\r\n       </form>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport Login from './Login';\r\nimport Strains from './strains/Strains';\r\n\r\n\r\nexport const PrivateRoute = ({ component: Component, ...rest}) => {\r\n    return (\r\n       <Route\r\n       {...rest}\r\n       render = {props => {\r\n           if (localStorage.getItem('token')){\r\n               return <Component {...props}/>\r\n           }else {\r\n               return <Redirect to=\"/\"/>\r\n           }\r\n       }}\r\n       />\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;\r\n","import React, { useState } from 'react';\r\nimport axiosWithAuth from './axiosWithAuth';\r\nimport axios from 'axios'\r\n\r\n\r\nexport const SignUp = props => {\r\n    const [credentials, setCredentials ] = useState({\r\n        \r\n        email: '',\r\n        password: '',\r\n        username: '',\r\n        role: 'Patient'\r\n        \r\n    });\r\n\r\n    const url = 'https://mc-7-be.herokuapp.com'\r\n\r\n    const { email, password, username } = credentials;\r\n\r\n    const onChange = e => {\r\n        \r\n        setCredentials({\r\n            ...credentials,\r\n        [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const signUpSubmit = (e) => {\r\n        e.preventDefault();\r\n       axios\r\n       .post(`${url}/api/auth/register`, credentials)\r\n       .then(res => {\r\n           localStorage.setItem('token', res.data)\r\n           props.history.push('/protected')\r\n       })\r\n       .catch(err => console.log(err))\r\n    }\r\n    \r\n    return (\r\n       <form onSubmit={signUpSubmit}>\r\n           <h2 className=\"text-primary\">Sign-Up</h2>\r\n           <input\r\n           name=\"email\"\r\n           type=\"email\"\r\n           placeholder=\"email\"\r\n           value={email}\r\n           onChange={onChange}\r\n           />\r\n            <input\r\n            name=\"password\"\r\n           type=\"password\"\r\n           placeholder=\"password\"\r\n           value={password}\r\n           onChange={onChange}\r\n           />\r\n            <input\r\n            name=\"username\"\r\n           type=\"text\"\r\n           placeholder=\"username\"\r\n           value={username}\r\n           onChange={onChange}\r\n           />\r\n           {/* <h5>Role</h5>\r\n           <input\r\n           type=\"radio\"\r\n           name=\"role\"\r\n           value=\"patient\"\r\n           checked={credentials.role === 'patient'}\r\n           onChange={onChange}/>\r\n           Patient{' '}\r\n           <input\r\n           type=\"radio\"\r\n           name=\"role\"\r\n           value=\"provider\"\r\n           checked={credentials.role === 'provider'}\r\n           onChange={onChange}/>\r\n           Provider{' '} */}\r\n           \r\n           <div>\r\n               <input\r\n               type=\"submit\"\r\n               value=\"Sign-up\"\r\n               className=\"btn btn-block bg-dark\"\r\n               />\r\n           </div>\r\n       </form>\r\n    )\r\n}\r\n\r\nexport default SignUp;\r\n","import React, { Fragment } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport './App.css';\r\nimport Home from './components/Home';\r\nimport Navbar, { NavBar } from './components/NavBar'\r\nimport Strains from './components/strains/Strains'\r\nimport PrivateRoute from './components/PrivateRoute'\r\nimport Login from './components/Login';\r\nimport SignUp from './components/SignUp'\r\n\r\n\r\nconst App =() =>{\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      \r\n    \r\n      <Fragment>\r\n        <NavBar/>\r\n        <div className=\"container\">\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home}/>\r\n        <Route exact path='/sign-up' component={SignUp}/>\r\n        <PrivateRoute  path=\"/protected\" component={Login}/>\r\n        \r\n        \r\n        <PrivateRoute  path=\"/protectedstrains\" component={Strains}/>\r\n        \r\n      </Switch>\r\n        </div>\r\n      </Fragment>\r\n   \r\n    \r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}